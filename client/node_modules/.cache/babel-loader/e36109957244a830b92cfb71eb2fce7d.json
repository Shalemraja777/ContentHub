{"ast":null,"code":"export const likePost = async (request, response) => {\n  try {\n    const {\n      id\n    } = request.params;\n    const post = await Post.findById(id);\n    if (!post) {\n      return response.status(404).json({\n        success: false,\n        error: 'Post not found'\n      });\n    }\n\n    // Check if the user has already liked the post (optional)\n    const hasLiked = post.likes.some(userId => userId.equals(request.user.id));\n    if (hasLiked) {\n      return response.status(400).json({\n        success: false,\n        error: 'User already liked this post'\n      });\n    }\n\n    // Update the likes count and save the user ID in the likes array\n    post.likes.push(request.user.id);\n    await post.save();\n    return response.status(200).json({\n      success: true,\n      data: 'Post liked successfully'\n    });\n  } catch (error) {\n    return response.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n};","map":{"version":3,"names":["likePost","request","response","id","params","post","Post","findById","status","json","success","error","hasLiked","likes","some","userId","equals","user","push","save","data","message"],"sources":["C:/Users/Shalem Raja/Dropbox/PC/Desktop/owncodes/Blog-Website/client/src/components/details/comments/Comment.jsx"],"sourcesContent":["export const likePost = async (request, response) => {\r\n    try {\r\n        const { id } = request.params;\r\n        const post = await Post.findById(id);\r\n        if (!post) {\r\n            return response.status(404).json({ success: false, error: 'Post not found' });\r\n        }\r\n\r\n        // Check if the user has already liked the post (optional)\r\n        const hasLiked = post.likes.some(userId => userId.equals(request.user.id));\r\n        if (hasLiked) {\r\n            return response.status(400).json({ success: false, error: 'User already liked this post' });\r\n        }\r\n\r\n        // Update the likes count and save the user ID in the likes array\r\n        post.likes.push(request.user.id);\r\n        await post.save();\r\n\r\n        return response.status(200).json({ success: true, data: 'Post liked successfully' });\r\n    } catch (error) {\r\n        return response.status(500).json({ success: false, error: error.message });\r\n    }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,MAAAA,CAAOC,OAAO,EAAEC,QAAQ,KAAK;EACjD,IAAI;IACA,MAAM;MAAEC;IAAG,CAAC,GAAGF,OAAO,CAACG,MAAM;IAC7B,MAAMC,IAAI,GAAG,MAAMC,IAAI,CAACC,QAAQ,CAACJ,EAAE,CAAC;IACpC,IAAI,CAACE,IAAI,EAAE;MACP,OAAOH,QAAQ,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAiB,CAAC,CAAC;IACjF;;IAEA;IACA,MAAMC,QAAQ,GAAGP,IAAI,CAACQ,KAAK,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,CAACf,OAAO,CAACgB,IAAI,CAACd,EAAE,CAAC,CAAC;IAC1E,IAAIS,QAAQ,EAAE;MACV,OAAOV,QAAQ,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAA+B,CAAC,CAAC;IAC/F;;IAEA;IACAN,IAAI,CAACQ,KAAK,CAACK,IAAI,CAACjB,OAAO,CAACgB,IAAI,CAACd,EAAE,CAAC;IAChC,MAAME,IAAI,CAACc,IAAI,CAAC,CAAC;IAEjB,OAAOjB,QAAQ,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,IAAI;MAAEU,IAAI,EAAE;IAA0B,CAAC,CAAC;EACxF,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZ,OAAOT,QAAQ,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,KAAK,EAAEA,KAAK,CAACU;IAAQ,CAAC,CAAC;EAC9E;AACJ,CAAC"},"metadata":{},"sourceType":"module"}