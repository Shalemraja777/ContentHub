{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\nimport { getAccessToken, getRefreshToken, setAccessToken, getType } from '../utils/common-utils';\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 10000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  if (config.TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if (config.TYPE.query) {\n    config.url = config.url + '/' + config.TYPE.query;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  // Stop global loader here\n  return processResponse(response);\n}, function (error) {\n  // Stop global loader here\n  return Promise.reject(ProcessError(error));\n});\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      msg: response === null || response === void 0 ? void 0 : response.msg,\n      code: response === null || response === void 0 ? void 0 : response.code\n    };\n  }\n};\n\n///////////////////////////////\n// If success -> returns { isSuccess: true, data: object }\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\n//////////////////////////////\nconst ProcessError = async error => {\n  if (error.response) {\n    var _error$response;\n    // Request made and server responded with a status code \n    // that falls out of the range of 2xx\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n      const {\n        url,\n        config\n      } = error.response;\n      console.log(error);\n      try {\n        let response = await API.getRefreshToken({\n          token: getRefreshToken()\n        });\n        if (response.isSuccess) {\n          sessionStorage.clear();\n          setAccessToken(response.data.accessToken);\n          const requestData = error.toJSON();\n          let response1 = await axios({\n            method: requestData.config.method,\n            url: requestData.config.baseURL + requestData.config.url,\n            headers: {\n              \"content-type\": \"application/json\",\n              \"authorization\": getAccessToken()\n            },\n            params: requestData.config.params\n          });\n        }\n      } catch (error) {\n        return Promise.reject(error);\n      }\n    } else {\n      console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n      return {\n        isError: true,\n        msg: API_NOTIFICATION_MESSAGES.responseFailure,\n        code: error.response.status\n      };\n    }\n  } else if (error.request) {\n    // The request was made but no response was received\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: \"\"\n    };\n  } else {\n    // Something happened in setting up the request that triggered an Error\n    console.log(\"ERROR IN RESPONSE: \", error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: \"\"\n    };\n  }\n};\n_c = ProcessError;\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === 'DELETE' ? '' : body,\n    responseType: value.responseType,\n    headers: {\n      authorization: getAccessToken()\n    },\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentCompleted);\n      }\n    }\n  });\n}\nexport { API };\nvar _c;\n$RefreshReg$(_c, \"ProcessError\");","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","getAccessToken","getRefreshToken","setAccessToken","getType","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","TYPE","params","query","url","error","Promise","reject","response","processResponse","ProcessError","status","isSuccess","data","isFailure","msg","code","_error$response","console","log","API","token","sessionStorage","clear","accessToken","requestData","toJSON","response1","method","isError","responseFailure","requestFailure","networkError","_c","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","responseType","authorization","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","onDownloadProgress","$RefreshReg$"],"sources":["C:/Users/Shalem Raja/Dropbox/PC/Desktop/GithubProjects/MERN-Stack-Projects/Blog-Website/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config';\r\nimport { getAccessToken, getRefreshToken, setAccessToken, getType } from '../utils/common-utils';\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 10000, \r\n    headers: {\r\n        \"content-type\": \"application/json\"\r\n    }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function(config) {\r\n        if (config.TYPE.params) {\r\n            config.params = config.TYPE.params\r\n        } else if (config.TYPE.query) {\r\n            config.url = config.url + '/' + config.TYPE.query;\r\n        }\r\n        return config;\r\n    },\r\n    function(error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n    function(response) {\r\n        // Stop global loader here\r\n        return processResponse(response);\r\n    },\r\n    function(error) {\r\n        // Stop global loader here\r\n        return Promise.reject(ProcessError(error));\r\n    }\r\n)\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isFailure: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst processResponse = (response) => {\r\n    if (response?.status === 200) {\r\n        return { isSuccess: true, data: response.data }\r\n    } else {\r\n        return {\r\n            isFailure: true,\r\n            status: response?.status,\r\n            msg: response?.msg,\r\n            code: response?.code\r\n        }\r\n    }\r\n}\r\n\r\n///////////////////////////////\r\n// If success -> returns { isSuccess: true, data: object }\r\n// If fail -> returns { isError: true, status: string, msg: string, code: int }\r\n//////////////////////////////\r\nconst ProcessError = async (error) => {\r\n    if (error.response) {\r\n        // Request made and server responded with a status code \r\n        // that falls out of the range of 2xx\r\n        if (error.response?.status === 403) {\r\n            const { url, config } = error.response;\r\n            console.log(error);\r\n            try {\r\n                let response = await API.getRefreshToken({ token: getRefreshToken() });\r\n                if (response.isSuccess) {\r\n                    sessionStorage.clear();\r\n                    setAccessToken(response.data.accessToken);\r\n\r\n                    const requestData = error.toJSON();\r\n\r\n                    let response1 = await axios({\r\n                        method: requestData.config.method,\r\n                        url: requestData.config.baseURL + requestData.config.url,\r\n                        headers: { \"content-type\": \"application/json\", \"authorization\": getAccessToken() },\r\n                        params: requestData.config.params\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                return Promise.reject(error)\r\n            }\r\n        } else {\r\n            console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n            return {\r\n                isError: true,\r\n                msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n                code: error.response.status\r\n            }\r\n        }\r\n    } else if (error.request) { \r\n        // The request was made but no response was received\r\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n            code: \"\"\r\n        }\r\n    } else { \r\n        // Something happened in setting up the request that triggered an Error\r\n        console.log(\"ERROR IN RESPONSE: \", error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.networkError,\r\n            code: \"\"\r\n        }\r\n    }\r\n}\r\n\r\nconst API = {};\r\n\r\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n        axiosInstance({\r\n            method: value.method,\r\n            url: value.url,\r\n            data: value.method === 'DELETE' ? '' : body,\r\n            responseType: value.responseType,\r\n            headers: {\r\n                authorization: getAccessToken(),\r\n            },\r\n            TYPE: getType(value, body),\r\n            onUploadProgress: function(progressEvent) {\r\n                if (showUploadProgress) {\r\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showUploadProgress(percentCompleted);\r\n                }\r\n            },\r\n            onDownloadProgress: function(progressEvent) {\r\n                if (showDownloadProgress) {\r\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showDownloadProgress(percentCompleted);\r\n                }\r\n            }\r\n        });\r\n}\r\n\r\nexport { API };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,qBAAqB;AAC7E,SAASC,cAAc,EAAEC,eAAe,EAAEC,cAAc,EAAEC,OAAO,QAAQ,uBAAuB;AAEhG,MAAMC,OAAO,GAAG,uBAAuB;AAEvC,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAM,CAAC;EAC/BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEFJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAClC,UAASC,MAAM,EAAE;EACb,IAAIA,MAAM,CAACC,IAAI,CAACC,MAAM,EAAE;IACpBF,MAAM,CAACE,MAAM,GAAGF,MAAM,CAACC,IAAI,CAACC,MAAM;EACtC,CAAC,MAAM,IAAIF,MAAM,CAACC,IAAI,CAACE,KAAK,EAAE;IAC1BH,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACI,GAAG,GAAG,GAAG,GAAGJ,MAAM,CAACC,IAAI,CAACE,KAAK;EACrD;EACA,OAAOH,MAAM;AACjB,CAAC,EACD,UAASK,KAAK,EAAE;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAEDb,aAAa,CAACK,YAAY,CAACW,QAAQ,CAACT,GAAG,CACnC,UAASS,QAAQ,EAAE;EACf;EACA,OAAOC,eAAe,CAACD,QAAQ,CAAC;AACpC,CAAC,EACD,UAASH,KAAK,EAAE;EACZ;EACA,OAAOC,OAAO,CAACC,MAAM,CAACG,YAAY,CAACL,KAAK,CAAC,CAAC;AAC9C,CACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMI,eAAe,GAAID,QAAQ,IAAK;EAClC,IAAI,CAAAA,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,MAAK,GAAG,EAAE;IAC1B,OAAO;MAAEC,SAAS,EAAE,IAAI;MAAEC,IAAI,EAAEL,QAAQ,CAACK;IAAK,CAAC;EACnD,CAAC,MAAM;IACH,OAAO;MACHC,SAAS,EAAE,IAAI;MACfH,MAAM,EAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM;MACxBI,GAAG,EAAEP,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEO,GAAG;MAClBC,IAAI,EAAER,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ;IACpB,CAAC;EACL;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,MAAMN,YAAY,GAAG,MAAOL,KAAK,IAAK;EAClC,IAAIA,KAAK,CAACG,QAAQ,EAAE;IAAA,IAAAS,eAAA;IAChB;IACA;IACA,IAAI,EAAAA,eAAA,GAAAZ,KAAK,CAACG,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBN,MAAM,MAAK,GAAG,EAAE;MAChC,MAAM;QAAEP,GAAG;QAAEJ;MAAO,CAAC,GAAGK,KAAK,CAACG,QAAQ;MACtCU,OAAO,CAACC,GAAG,CAACd,KAAK,CAAC;MAClB,IAAI;QACA,IAAIG,QAAQ,GAAG,MAAMY,GAAG,CAAChC,eAAe,CAAC;UAAEiC,KAAK,EAAEjC,eAAe,CAAC;QAAE,CAAC,CAAC;QACtE,IAAIoB,QAAQ,CAACI,SAAS,EAAE;UACpBU,cAAc,CAACC,KAAK,CAAC,CAAC;UACtBlC,cAAc,CAACmB,QAAQ,CAACK,IAAI,CAACW,WAAW,CAAC;UAEzC,MAAMC,WAAW,GAAGpB,KAAK,CAACqB,MAAM,CAAC,CAAC;UAElC,IAAIC,SAAS,GAAG,MAAM3C,KAAK,CAAC;YACxB4C,MAAM,EAAEH,WAAW,CAACzB,MAAM,CAAC4B,MAAM;YACjCxB,GAAG,EAAEqB,WAAW,CAACzB,MAAM,CAACN,OAAO,GAAG+B,WAAW,CAACzB,MAAM,CAACI,GAAG;YACxDR,OAAO,EAAE;cAAE,cAAc,EAAE,kBAAkB;cAAE,eAAe,EAAET,cAAc,CAAC;YAAE,CAAC;YAClFe,MAAM,EAAEuB,WAAW,CAACzB,MAAM,CAACE;UAC/B,CAAC,CAAC;QACN;MACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;QACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;MAChC;IACJ,CAAC,MAAM;MACHa,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEd,KAAK,CAACqB,MAAM,CAAC,CAAC,CAAC;MAClD,OAAO;QACHG,OAAO,EAAE,IAAI;QACbd,GAAG,EAAE9B,yBAAyB,CAAC6C,eAAe;QAC9Cd,IAAI,EAAEX,KAAK,CAACG,QAAQ,CAACG;MACzB,CAAC;IACL;EACJ,CAAC,MAAM,IAAIN,KAAK,CAACP,OAAO,EAAE;IACtB;IACAoB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEd,KAAK,CAACqB,MAAM,CAAC,CAAC,CAAC;IAClD,OAAO;MACHG,OAAO,EAAE,IAAI;MACbd,GAAG,EAAE9B,yBAAyB,CAAC8C,cAAc;MAC7Cf,IAAI,EAAE;IACV,CAAC;EACL,CAAC,MAAM;IACH;IACAE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEd,KAAK,CAACqB,MAAM,CAAC,CAAC,CAAC;IAClD,OAAO;MACHG,OAAO,EAAE,IAAI;MACbd,GAAG,EAAE9B,yBAAyB,CAAC+C,YAAY;MAC3ChB,IAAI,EAAE;IACV,CAAC;EACL;AACJ,CAAC;AAAAiB,EAAA,GAlDKvB,YAAY;AAoDlB,MAAMU,GAAG,GAAG,CAAC,CAAC;AAEd,KAAK,MAAM,CAACc,GAAG,EAAEC,KAAK,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACnD,YAAY,CAAC,EAAE;EACrDkC,GAAG,CAACc,GAAG,CAAC,GAAG,CAACI,IAAI,EAAEC,kBAAkB,EAAEC,oBAAoB,KACtDhD,aAAa,CAAC;IACVoC,MAAM,EAAEO,KAAK,CAACP,MAAM;IACpBxB,GAAG,EAAE+B,KAAK,CAAC/B,GAAG;IACdS,IAAI,EAAEsB,KAAK,CAACP,MAAM,KAAK,QAAQ,GAAG,EAAE,GAAGU,IAAI;IAC3CG,YAAY,EAAEN,KAAK,CAACM,YAAY;IAChC7C,OAAO,EAAE;MACL8C,aAAa,EAAEvD,cAAc,CAAC;IAClC,CAAC;IACDc,IAAI,EAAEX,OAAO,CAAC6C,KAAK,EAAEG,IAAI,CAAC;IAC1BK,gBAAgB,EAAE,SAAAA,CAASC,aAAa,EAAE;MACtC,IAAIL,kBAAkB,EAAE;QACpB,IAAIM,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACrFV,kBAAkB,CAACM,gBAAgB,CAAC;MACxC;IACJ,CAAC;IACDK,kBAAkB,EAAE,SAAAA,CAASN,aAAa,EAAE;MACxC,IAAIJ,oBAAoB,EAAE;QACtB,IAAIK,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAEH,aAAa,CAACI,MAAM,GAAG,GAAG,GAAIJ,aAAa,CAACK,KAAK,CAAC;QACrFT,oBAAoB,CAACK,gBAAgB,CAAC;MAC1C;IACJ;EACJ,CAAC,CAAC;AACV;AAEA,SAASzB,GAAG;AAAG,IAAAa,EAAA;AAAAkB,YAAA,CAAAlB,EAAA"},"metadata":{},"sourceType":"module"}